/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

76576500
*/

package scala

object PE12 extends App {

  println(solveProblem(1,0))
  
  //println(countMultiples(76576500))
  
  // changed to tail recursive to avoid stackoverflow
  def solveProblem(n: Int, sum: Int) : Int = {
    //val m = triangularNumber(n)
      val m = sum + n
    if (countMultiples(m) > 500) {
      m
    }
    else {
      //println(m)
      solveProblem(n + 1, m)
    }
  }
  
    // this should be named countFactors
  def countMultiples(n: Int) : Int = {
    var counter = 0
    var i = 0
    for (i <- 1 to n) { // Range should be 1 to  sqrt(n) and counter+=2 and +=1 if final number
      if((n % i == 0)) counter += 1
    }
    counter
  }
  
  def triangularNumber(n: Int) : Int = {
    var i = 0
    var runningSum = 0
    for (i <- 1 to n) {
      runningSum += i
    }
    runningSum
  }

  
}